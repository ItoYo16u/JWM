var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"/docs/prologue/introduction/",title:"Introduction",description:"JWM is a cross-platform Java window management and OS integration library.",content:"👉  Status: Alpha. Expect API breakages.    Getting Started #     groupId artifactId version     jwm io.github.humbleUI jwm      For maven\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.github.humbleui\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jwm\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.3.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; For gradle\ndependencies { compile 'io.github.humbleui:jwm:0.3.1' } For leiningen\ndependencies [[org.clojure/clojure \u0026quot;x.y.z\u0026quot;] [io.github.humbleui/jwm \u0026quot;0.3.1\u0026quot;]] For sbt\nlibraryDependencies += \u0026quot;io.github.humbleui\u0026quot; % \u0026quot;jwm\u0026quot; % \u0026quot;0.3.1\u0026quot; Tutorial # Check Quick Start →\nRecipes # Check Recipes →\nExamples # Visit examples direcory in JWM repository. As JWM intends to play well with skija, examples in Skija repository will also help.\nContributing \u0026amp; Development # Convensions # Learn convensions and API design of JWM. Convension Guide →\ncontribution guide # PRs \u0026amp; issue reports are welcome!\nPlease read Convensions first.\nIf you are looking where to start, there’s a label: Good first issue.\nIssues labeled “Design” and “Not sure” require prior discussion—leave a comment with your ideas!\nHelp # Get help on JWM. Help →\nResources # frameworks #  Clojure Desktop UI framework: https://github.com/HumbleUI/HumbleUI  "}).add({id:1,href:"/docs/prologue/quick-start/",title:"Quick Start",description:"One page summary of how to start a JWM project.",content:"Install Dependencies # Download jwm jar using build tool or manually from maven repository:\n    groupId artifactId version     jwm io.github.humbleUI jwm     types io.github.humbleUI types      E.g. for Maven it’ll look like this:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.github.humbleui\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jwm\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.3.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; mvn command:\nmvn dependency:get -Dartifact=io.github.humbleui:jwm:0.3.1 -Ddest=./ mvn dependency:get -Dartifact=io.github.humbleui:types:0.1.2 -Ddest=./ coursier command:\ncs fetch io.github.humbleui:jwm:0.3.1 cs fetch io.github.humbleui:types:0.1.2 Download example script # wget https://raw.githubusercontent.com/HumbleUI/JWM/main/docs/GettingStarted.java Run Example # On Windows and Linux:\njava -cp jwm-0.3.1.jar:types-0.1.1.jar GettingStarted.java On macOS, add -XstartOnFirstThread flag to java:\njava -XstartOnFirstThread -cp jwm-0.3.1.jar:types-0.1.1.jar GettingStarted.java note # types-0.1.1.jar here are from https://github.com/HumbleUI/Types. They will be included as a transitive dependency if you are using Maven or Gradle.\nStep by Step # Initialize # Init JWM library:\nApp.init(); Creating a window # Create a window:\nWindow window = App.makeWindow(); window.setTitle(\u0026#34;Hello, world!\u0026#34;); Set up a listener:\nclass EventHandler implements Consumer\u0026lt;Event\u0026gt; { public final Window window; public EventHandler(Window window) { this.window = window; } } Write the accept function:\n@Override public void accept(Event e) { System.out.println(e); if (e instanceof EventWindowCloseRequest) { window.close(); App.terminate(); } } Assign handler to the window:\nwindow.setEventListener(new EventHandler(window)); Display the window:\nwindow.setVisible(true); start an event loop # Start the event loop (will block the thread):\nApp.start(); See it all together in GettingStarted.java.\n"}).add({id:2,href:"/docs/prologue/comparison-to-other-ui/window-libraries/",title:"Comparison to other UI/window libraries",description:"Comparison to other UI/window libraries",content:"Traditionally, Java UIs struggled with high-quality OS integration. JWM plans to bring it to modern standards by implementing those integrations from scratch in modern low-level OS-native APIs. Prior art:\nAWT: #  Bullet-proof, works everywhere Event loop is two-threaded (lags in UI) Dated font management, color management, dpi management No vsync  JavaFX: #  Fixed threading model Performance is sometimes great, sometimes terrible Even more limited fonts/color/graphics API VSync is weird in multi-monitor case No real extensibility  Winit #  https://github.com/rust-windowing/winit Tried at JetBrains Complicated event loop model (tries to unify desktop + web + mobile) https://github.com/rust-windowing/winit/blob/master/FEATURES.md  GLFW via LWJGL, SDL2: #  Game-oriented Bad window management No OS integration Create one window and go full-screen is the main use-case  Electron: #  Seems great, will use as inspiration https://www.electronjs.org/docs  "}).add({id:3,href:"/docs/prologue/recipes/",title:"Recipes",description:"Recipes.",content:"Positioning the window # You can access information about screen configuration through App::getScreens and App::getPrimaryScreen.\nThis will create a window that occupies the left side of the screen and is 800 px wide:\nScreen screen = App.getPrimaryScreen(); IRect workArea = screen.getWorkArea(); window.setWindowPosition(workArea.getLeft(), workArea.getTop()); float scale = screen.getScale(); window.setWindowSize(800 * scale, workArea.getHeight()); All screen coordinates are in one absolute coordinate space. Top left corner of the primary screen usually has (0, 0) coordinate:\n All pixel sizes are also unscaled. They correspond to the physical screen pixels, not “logical” pixels. Note: this is similar to how Windows/Linux work but opposite of what macOS does. JWM abstracts that difference away for you.\nTo convert “logical” pixels to physical one, multiply by Screen::getScale(). E.g. if you want 800×600 window on macOS, do:\nfloat scale = window.getScreen().getScale(); window.setWindowSize(800 * scale, 600 * scale); Window position is specified in the same absolute coordinate space. E.g. to move window to another screen just do Window::setPosition to a coordinate within that screen bounds:\n Handling mouse events # @Override public void accept(Event e) { if (e instanceof EventMouseMove ee) { // ee.getX() / ee.getY() for window-relative coordinates  } else if (e instanceof EventMouseScroll ee) { // ee.getDeltaX() / ee.getDeltaY() for amount of text lines to scroll  // See #115  } else if (e instanceof EventMouseButton ee) { // ee.getButton() + ee.getPressed()  } } Handling keyboard events # Simple key handling (e.g. for program shortcuts) via EventKey. Simple text input via EventTextInput. Advanced text input (IME) via EventTextInputMarked + TextInputClient. See PanelTextInput.java for hints how to handle IME input.\n@Override public void accept(Event e) { if (e instanceof EventKey ee) { // ee.getKey() + ee.isPressed() for raw keyboard keys  // Do not use this for text input  } else if (e instanceof EventTextInput ee) { // ee.getText() for text string entered  } else if (e instanceof EventTextInputMarked ee) { // ...  } } Render loop # JWM drawing loop is on-demand and always v-synced with monitor refresh rate (except rare cases like raster rendering on X11). To draw a frame, you first post a frame request:\nwindow.requestFrame(); Note that if you do it not from the UI thread (== not from accept method of EventHandler), use App::runOnUIThread to get to UI thread first:\nApp.runOnUIThread(() -\u0026gt; window.requestFrame()); Then, in accept method handle EventFrame:\n@Override public void accept(Event e) { if (e instanceof EventFrame) { paint(window); } } This will render just one frame. If you want to render in a loop (e.g. for an animation or for a game), you can request next frame right after paint:\n@Override public void accept(Event e) { if (e instanceof EventFrame) { paint(window); window.requestFrame(); } } Layers # Now, JWM does not provide anything to actually draw stuff. You can use other libraries, e.g. Skija, to do that. But JWM provides Layers to initilize graphical context and get all the necessary pointers to use with DirectX 12, OpenGL or Metal.\nLet’s write a simple paint function that initializes OpenGL and uses it to draw. First, let’s create a layer and attach it:\nclass EventHandler implements Consumer\u0026lt;Event\u0026gt; { public final Window window; public final LayerGL layer; public EventHandler(Window window) { this.window = window; layer = new LayerGL(); window.setLayer(layer); } } Then, if the paint request comes, we need to redirect it to the paint function:\n@Override public void accept(Event e) { if (e instanceof EventFrame) { paint(); window.requestFrame(); } } And finally, we write the paint function itself:\npublic void paint() { layer.makeCurrent(); // do the drawing  layer.swapBuffers(); } Using JWM with Skija # If you wish to use Skija for rendering, JWM comes with convenient Layer*Skija classes:\nlayer = new LayerGLSkija(); window.setLayer(layer); Skija layers work by generating a special event (EventFrameSkija) every time frame is requested. So instead of handling EventFrame, handle EventFrameSkija:\nif (e instanceof EventFrameSkija ee) { Surface s = ee.getSurface(); paint(s.getCanvas(), s.getWidth(), s.getHeight()); } Note: JWM does not declare Skija as a dependency. For Skija layers to work, add Skija (0.98.0 or later) to your apps’s dependencies.\n"}).add({id:4,href:"/docs/prologue/api-status/",title:"API Status",description:"Status.",content:"App #     Windows macOS X11     init ✅ ✅ ✅   makeWindow ✅ #121 ✅   start ✅ ✅ ✅   getScreens ✅ ✅ ✅   getPrimaryScreen ✅ ✅ ✅   runOnUIThread ✅ ✅ #113   terminate ✅ ✅ ✅   Show notification ❌ ❌ ❌    Theme #     Windows macOS X11     isHighContrast ✅ ✅ ➖   isDark ✅ ✅ ➖   isInverted #161 ✅ ➖    Window #     Windows macOS X11     setEventListener ✅ ✅ ✅   setTextInputClient ✅ ✅ ✅   setTextInputEnabled ✅ ❌ ❌   unmarkText ✅ ❌ ❌   show ✅ ✅ ✅   getWindowRect ✅ ✅ #109   getContentRect ✅ ✅ ✅   setWindowPosition ✅ ✅ ✅   setWindowSize ✅ ✅ #109   setContentSize ✅ ✅ ✅   getScreen ✅ ✅ ✅   requestFrame ✅ ✅ #113   close ✅ #107 ✅   minimize ✅ ✅ ✅   maximize ✅ ✅ ✅   restore ✅ ✅ ✅   setTitle ✅ ✅ ✅   setIcon ✅ ✅ #95   Set system cursor ✅ ✅ #99   Customize titlebar #75 #75 #75   focus ❌ ✅ ❌   Get ZOrder ❌ ✅ ❌   Set custom cursor ❌ ❌ ❌   openFile ❌ ❌ ❌   openFolder ❌ ❌ ❌   Transparency ✅ ❌ ❌   Toggle Fullscreen ❌ ❌ ❌   setMinimumSize ❌ ❌ ❌   setMaximumSize ❌ ❌ ❌   setResizable ❌ ❌ ❌    Events #     Windows macOS X11     EventFrame ✅ ✅ ✅   EventKey ✅ ✅ ✅   EventMouseButton ✅ ✅ ✅   EventMouseMove ✅ ✅ ✅   EventMouseScroll #115 ✅ #115   EventTextInput ✅ #105 ✅   EventTextInputMarked ✅ ✅ ✅   EventWindowCloseRequest ✅ ✅ ✅   EventWindowMove ✅ #116 ✅   EventWindowResize ✅ ✅ ✅   EventWindowMinimize ✅ ✅ #96   EventWindowMaximize ✅ ✅ #96   EventWindowRestore ✅ ✅ #96   EventWindowVisible #140 #140 #140   EventWindowScreenChange #117 #117 #117   Drag \u0026amp; Drop ❌ ❌ ❌   Touch events ❌ ❌ ❌   Theme Changed ❌ ❌ ❌    Screen #     Windows macOS X11     id ✅ ✅ ✅   isPrimary ✅ ✅ ✅   bounds ✅ ✅ ✅   scale ✅ ✅ ✅   workArea ✅ ✅ #119   colorSpace #122 #122 #122    Clipboard #     Windows macOS X11     set ✅ #51 ✅   get ✅ #51 ✅   getFormats ✅ #51 ✅   clear ✅ #51 ✅   registerFormat ✅ #51 ✅    Layers #     Windows macOS X11     Raster ✅ #81 ✅   OpenGL ✅ ✅ ✅   DirectX 11 ❌ ➖ ➖   DirectX 12 ✅ ➖ ➖   Metal ➖ ✅ ➖   Vulkan ❌ ➖ ❌    Packaging #     Windows macOS X11     Run on GraalVM ❌ ❌ ❌   App package ❌ ❌ ❌    "}).add({id:5,href:"/docs/development/convensions/",title:"Convensions",description:"Convensions and API design of JWM.",content:"General naming conventions #  camelCase in Java \u0026amp; C++. UPPER_CASE for enum values. Field/method prefixes:  _n... for native methods. _... for “private” fields. get.../is... for getters. set.../with... for setters. make... for static named constructors. _FLAG_\u0026lt;TYPE\u0026gt;_\u0026lt;NAME\u0026gt; for bit flags. ...Mask for bit masks.   Getter methods ALWAYS start with get... / is... (lineNumber -\u0026gt; getLineNumber(), accessible -\u0026gt; isAccessible()). Constructors/static builders ALWAYS start with make.... Setters/updaters must return this. Class names use \u0026lt;Generic\u0026gt;-\u0026lt;Specific\u0026gt; pattern (EventKey, not KeyEvent, WindowMac, not MacWindow). That way they group nicely in file lists.  Some common dictionary:\n ptr (paintPtr, canvasPtr, \u0026hellip;) count (instead of size/length/\u0026hellip;)  Code organization #  Use *.cc and *.hh for C++ files All C++ code in jwm namespace All public Java code in io.github.humbleui.jwm namespace, implementation in io.github.humbleui.jwm.impl No inner classes  Visibility #  All fields/methods public. Fields/methods/inner classes not for public consumption:  also public, but prefixed with _ (startIndex -\u0026gt; _startIndex). annotated with @ApiStatus.Internal    Why public?\n We cannot anticipate what specific needs our clients might have. Sometimes the difference between totally possible and completely impossible might be as small as a single field made public. It’s strictly better to have implementation details accessible and not use them than just have them inaccessible. Multiple packages are impossible even with protected visibility. We are all grown ups. If clients use fields starting with _, we assume they know what they are doing, and that the alternatives were worse. As with private APIs, we give no guarantees with regards to _ fields/methods. They are considered effectively private, but if you really, really need them, they are here for you.  Data classes #  public final fields prefixed with _. public getters/setters following javaBeans convention (get/is/set/with). setters return this. flags/bit masks are not exposed as getters, instead, individual check for each flag value is done.  Why getters/setters?\n If fields goes away if future version, still can be emulated with getter (or getter might throw). Computable fields need getters (e.g. height = bottom - top), would be strange to have them as methods but others as fields. Some fields need to call native instance, again, getter can hide that.  Example:\n@lombok.Data public class LineMetrics { @ApiStatus.Internal public final long _startIndex; @ApiStatus.Internal public final long _endIndex; @ApiStatus.Internal public final long _endExcludingWhitespaces; @ApiStatus.Internal public final long _endIncludingNewline; @ApiStatus.Internal public final boolean _hardBreak; @ApiStatus.Internal @Getter(AccessLevel.NONE) public final int _flags; @ApiStatus.Internal public static final int _FLAG_IS_BOLD = 0b0001; @ApiStatus.Internal public static final int _FLAG_IS_ITALIC = 0b0010; public boolean isBold() { return (_flags | _FLAG_IS_BOLD) != 0; } public boolean isItalic() { return (_flags | _FLAG_IS_ITALIC) != 0; } } API conventions #  Data types:  Fractional: float (Java) / float (C++) String indices: int (Java) / int32_t/jint (C++) Array indices: int (Java) / int32_t/jint (C++) Pointers: long (Java) / int64_t/jlong (C++)   (0, 0) in top left corner Use unscaled (physical) pixels for everything (mouse position, windows size, etc). DPI scaling is a problem for API clients DPI is fractional (1.5, 1.75)  Interop #  Native methods are public static, name starts with _n... + java method name.  Exceptions are overloaded Skia methods. Can’t overload in JNI.   Enum values are passed as ints (for this to work, enums must have same elements in the same order). Unroll objects and small fixed-size arrays when possible (Rect -\u0026gt; jfloat, jfloat, jfloat, jfloat, int[2] -\u0026gt; jint, jint). Pointers are passed as longs. Two-integers are returned as single long. For anything bigger, return data objects, e.g. IRect instead of int[]. Strings are passed as jstring (converted to UTF-8/UTF-16 on C++ side). Prefer Native.ptr(obj) to obj._ptr (required for nullable pointers, advised for the rest for consistency). Assert known constraint on Java side (e.g. assert matrix.length == 9).  "}).add({id:6,href:"/docs/development/run-example-applcation/",title:"Run Example Applcation",description:"How to Run JWM Example Applcation.",content:" Prerequisites # First of all, download and install these dependencies below.\n Shared: Git, CMake(3.11+), Ninja, C++ compiler, JDK 11+, $JAVA_HOME, Python 3 Windows 10: Microsoft Visual C++ (MSVC), x64 Native Tools Command Prompt for VS. Ubuntu 20.04: libxcomposite-dev libxrandr-dev libgl1-mesa-dev libxi-dev libxcursor-dev  Clone repository # git clone git@github.com:humbleui/jwm.git cd jwm Run dashboard example app without building: # ./script/run.py --jwm-version \u0026lt;version\u0026gt; Or build from source and run # ./script/run.py Run native-image example app: # todo other commands # build from source # ./script build clean build # ./script clean "}).add({id:7,href:"/docs/development/setup-guide-on-windows/",title:"Setup Guide on Windows",description:"How to Setup Dev Environment for JWM on Windows",content:"Install Python 3 # from windows power shell\nwinget install Python.Python.3 or from chocolatey\nchoco install -y python python --version Install Ninja # Download executable from https://github.com/ninja-build/ninja/releases and export path.\nInstall visual studio build tools # Run this command in windows power shell.\nwinget install Microsoft.VisualStudio.2019.BuildTools Then, run C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\setup.exe and install c++ development tools.\nAfter reboot, open one of the command prompts for VS 2019 matching your arch.\nUsually, you can open command prompt for VS from C:\\path\\to\\Start Menu\\Programs\\Visual Studio 2019\\Visual Studio Tools\\VC.\nConfigure path and env (optional) # If you want to use visual studio build tools not from command prompt for VS but from another shell like git bash, export these environment variables.\nNOTE: Change paths, architecture(arm,x64,x86) and visual studio version according to your environment.\nINCLUDE\n C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Tools\\MSVC\\14.29.30133\\include C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\ucrt C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\shared C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\cppwinrt C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\um C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\winrt  LIB\n C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.19041.0\\ucrt\\x64 C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.19041.0\\ucrt_enclave\\x64 C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.19041.0\\um\\x64 C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Tools\\MSVC\\14.29.30133\\lib\\x64  PATH\n C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.19041.0\\x64 C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Tools\\MSVC\\14.29.30133\\bin\\Hostx64\\x64 C:\\path\\to\\ninja  "}).add({id:8,href:"/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:"General #  run python ./script/crean.py try removing \u0026lt;platform\u0026gt;/build directory and re-run command check environment variables and paths(which \u0026lt;cmd\u0026gt; in unix-like shell or (echo, where \u0026lt;cmd\u0026gt; in Windows power shell)  Could not run example application # check prerequisites #  Example application needs JDK 16  Problems on Windows # build fails #  check development/setup-win If you use Windows, make sure you disable other c++ compilers like minGW  Problems on Mac OS # tbd\nProblems on Linux # tbd\n"}).add({id:9,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:"Why all APIs are public? #  We cannot anticipate what specific needs our clients might have. Sometimes the difference between totally possible and completely impossible might be as small as a single field made public.\nIt’s strictly better to have implementation details accessible and not use them than just have them inaccessible.\n Convensions/Visibility →\nWhy not using build tool instead of python scripts? # See Python as a build tool\nAlternatives? # Check Comparison to other UI/window libraries →\n"}).add({id:10,href:"/docs/help/",title:"Help",description:"Help.",content:""}).add({id:11,href:"/docs/development/",title:"Development",description:"Development Docs.",content:""}).add({id:12,href:"/docs/prologue/",title:"Prologue",description:"JWM Docs.",content:""}).add({id:13,href:"/docs/",title:"Docs",description:"JWM Docs.",content:""}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()